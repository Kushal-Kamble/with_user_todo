document.getElementById("voiceBtn").addEventListener("click", () => {
  if (!('webkitSpeechRecognition' in window)) {
    alert("ЁЯОд Voice recognition is not supported in your browser.");
    return;
  }

  const recognition = new webkitSpeechRecognition();
  recognition.lang = "hi-IN"; // Supports Hindi/English both
  recognition.interimResults = false;

  recognition.onstart = function () {
    console.log("ЁЯОд Voice listening started...");
  };

  recognition.onresult = function (event) {
    const command = event.results[0][0].transcript.toLowerCase();
    console.log("ЁЯФК You said:", command);

    const userId = $("input[name=user_id]").val();

    fetch("php/tasks.php?action=get&user_id=" + userId)
      .then(res => res.json())
      .then(tasks => {
        let msg = "";
        let speakText = "";

        if (
          command.includes("pending") ||
          command.includes("incomplete") ||
          command.includes("рдЕрдзреВрд░рд╛") ||
          command.includes("рд▓рдВрдмрд┐рдд")
        ) {
          const pendingTasks = tasks.filter(t => t.completed == 0);
          if (pendingTasks.length > 0) {
            const first = pendingTasks[0];

            msg = `ЁЯФФ Incomplete Task: ${first.title}\nЁЯУЕ Deadline: ${first.deadline}`;

            // Show AI modal with details
            document.getElementById("modalTaskTitle").innerText = first.title;
            document.getElementById("modalTaskDesc").innerText = first.description;
            document.getElementById("modalTaskDeadline").innerText = first.deadline;
            const myModal = new bootstrap.Modal(document.getElementById("taskModalVoice"));
            myModal.show();

            // Voice output (Hindi + English)
            speakText = `рдЖрдкрдХрд╛ рдЕрдзреВрд░рд╛ рдХрд╛рд░реНрдп '${first.title}' рд╣реИред рдЗрд╕рдХреА рдбреЗрдбрд▓рд╛рдЗрди рд╣реИ ${first.deadline}. Your incomplete task is '${first.title}' and its deadline is ${first.deadline}.`;
          } else {
            msg = "тЬЕ рдХреЛрдИ рд▓рдВрдмрд┐рдд рдХрд╛рд░реНрдп рдирд╣реАрдВ рд╣реИред";
            speakText = "рдЖрдкрдХреЗ рд╕рднреА рдХрд╛рд░реНрдп рдкреВрд░реЗ рд╣реЛ рдЪреБрдХреЗ рд╣реИрдВред You have no pending tasks.";
          }
        } else {
          msg = "тЪая╕П рдХрдорд╛рдВрдб рд╕рдордЭ рдореЗрдВ рдирд╣реАрдВ рдЖрдИред";
          speakText = "Sorry, I didnтАЩt understand. рдХреГрдкрдпрд╛ рджреЛрдмрд╛рд░рд╛ рдХрд╣реЗрдВред";
        }

        // Show on screen
        showToast(msg);
        speakAI(speakText);
      })
      .catch(err => {
        console.error("тЭМ Task fetch error:", err);
        const failMsg = "рдЯрд╛рд╕реНрдХ рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИред";
        showToast(failMsg);
        speakAI("рдЯрд╛рд╕реНрдХ рд╕рд░реНрд╡рд░ рд╕реЗ рдкреНрд░рд╛рдкреНрдд рдирд╣реАрдВ рд╣реЛ рд╕рдХреЗред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред");
      });
  };

  recognition.onerror = function (e) {
    const errMsg = "ЁЯОЩя╕П рд╡реЙрдЗрд╕ рд░рд┐рдХрдЧреНрдирд┐рд╢рди рдореЗрдВ рддреНрд░реБрдЯрд┐: " + e.error;
    console.error(errMsg);
    showToast(errMsg);
    speakAI("рд╡реЙрдЗрд╕ рд░рд┐рдХрдЧреНрдирд┐рд╢рди рдореЗрдВ рддреНрд░реБрдЯрд┐ рдЖрдИ рд╣реИред рдХреГрдкрдпрд╛ рджреЛрдмрд╛рд░рд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред");
  };

  recognition.start();
});

// ЁЯОд Voice Speaking Function (Hindi + English)
function speakAI(text) {
  const utterance = new SpeechSynthesisUtterance(text);
  utterance.lang = "en-IN"; // Indian English (can handle Hindi)
  utterance.pitch = 1;
  utterance.rate = 1;
  utterance.volume = 1;
  window.speechSynthesis.speak(utterance);
}

// тЬЕ Toast Display Function
function showToast(message) {
  const toastBox = document.getElementById("toastMessage");
  toastBox.innerText = message;
  const toast = new bootstrap.Toast(document.getElementById("toastVoice"));
  toast.show();
}
